version: '3.8'

services:
  postgres:
    image: postgres:alpine
    container_name: postgres
    ports:
      - 5432:5432
    env_file: .env.docker
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      start_period: 15s
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always

  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  server:
    # image: amruthpillai/reactive-resume:server-latest
    build:
      context: .
      dockerfile: ./server/Dockerfile
    container_name: server
    env_file: .env.docker
    depends_on:
      - traefik
      - postgres
    labels:
      - traefik.enable=true
      - traefik.http.routers.server.entrypoints=web
      - traefik.http.routers.server.rule=Host(`localhost`) && PathPrefix(`/api/`)
      - traefik.http.routers.server.middlewares=server-stripprefix
      - traefik.http.middlewares.server-stripprefix.stripprefix.prefixes=/api
      - traefik.http.middlewares.server-stripprefix.stripprefix.forceslash=true
    restart: always

  client:
    # image: amruthpillai/reactive-resume:client-latest
    build:
      context: .
      dockerfile: ./client/Dockerfile
    container_name: client
    env_file: .env.docker
    depends_on:
      - traefik
      - server
    labels:
      - traefik.enable=true
      - traefik.http.routers.client.rule=Host(`localhost`)
      - traefik.http.routers.client.entrypoints=web
    restart: always

volumes:
  pgdata:
